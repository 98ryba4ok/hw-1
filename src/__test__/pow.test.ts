// @ts-nocheck
import pow from '../pow';

describe('Функция Pow', () => {
  it('Первый вариант использования. Аргументы числа', () => {
    expect(pow(2, 2)).toBe(4);
  });

  it('Первый вариант использования. Степень не число', () => {
    expect(() => pow(4, '5')).toThrowError(/^INVALID_ARGUMENT$/);
  });

  it('Первый вариант использования. Аргумент не число', () => {
    expect(() => pow('2', 3)).toThrowError(/^INVALID_ARGUMENT$/);
  });

  it('Первый вариант использования. Все аргументы не числа', () => {
    expect(() => pow('2', '3')).toThrowError(/^INVALID_ARGUMENT$/);
  });

  it('Первый вариант использования. Степень 0', () => {
    expect(pow(4, 0)).toBe(1);
  });

  it('Первый вариант использования. Степень отрицательная', () => {
    expect(pow(4, -2)).toBe(0.0625);
  });

  it('Первый вариант использования. Аргумент 0', () => {
    expect(pow(0, 3)).toBe(0);
  });

  it('Первый вариант использования. Возведение 0 в степень -1', () => {
    expect(pow(0, -1)).toBe(Infinity);
  });

  it('Второй вариант использования. Все числа', () => {
    expect(pow(2)(5)).toBe(32);
  });

  it('Второй вариант использования. Все не числа', () => {
    expect(() => pow([])('5')).toThrowError(/^INVALID_ARGUMENT$/);
  });

  it('Второй вариант использования. Степень не число', () => {
    expect(() => pow(2)('1')).toThrowError(/^INVALID_ARGUMENT$/);
  });

  it('Второй вариант использования. Аргумент не число', () => {
    expect(() => pow([])(2)).toThrowError(/^INVALID_ARGUMENT$/);
  });

  it('Второй вариант использования. Все числа', () => {
    expect(pow(4)(7)).toBe(16384);
  });

  it('Второй вариант использования. Степень 0', () => {
    expect(pow(4)(0)).toBe(1);
  });

  it('Второй вариант использования. Степень отрицательная', () => {
    expect(pow(2)(-5)).toBe(0.03125);
  });

  it('Второй вариант использования. Аргумент 0', () => {
    expect(pow(0)(5)).toBe(0);
  });

  it('Второй вариант использования. Возведение 0 в степень -1', () => {
    expect(pow(0)(-1)).toBe(Infinity);
  });
});
